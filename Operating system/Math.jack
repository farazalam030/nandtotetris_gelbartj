// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powersOf2;

    /** Initializes the library. */
    function void init() {
        var int i;

        let powersOf2 = Array.new(15);
        let powersOf2[0] = 1;
        let powersOf2[1] = 2;
        let powersOf2[2] = 4;
        let powersOf2[3] = 8;
        let powersOf2[4] = 16;
        let powersOf2[5] = 32;
        let powersOf2[6] = 64;
        let powersOf2[7] = 128;
        let powersOf2[8] = 256;
        let powersOf2[9] = 512;
        let powersOf2[10] = 1024;
        let powersOf2[11] = 2048;
        let powersOf2[12] = 4096;
        let powersOf2[13] = 8192;
        let powersOf2[14] = 16384;
        // let powersOf2[15] = 32767; // off by 1, integer max
        
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (-x);
        }
        return x;
    }

    function boolean netNeg(boolean negX, boolean negY) {
        if ((negX & negY) | (~negX & ~negY)) {
            return false;
        }
       
        return true;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;

        if ((x = 0) | (y = 0)) {
            return 0;
        }
        if (x = 1) {
            return y;
        }
        if (y = 1) {
            return x;
        }
        if (x = -1) {
            return -y;
        }
        if (y = -1) {
            return -x;
        }

        let sum = 0;
        let shiftedX = x;
        let i = 0;        

        while (((powersOf2[i] < (y + 1)) | (y < 0)) & (i < 15)) {
            // do Output.printInt(powersOf2[i]);
            if ((y & powersOf2[i]) = powersOf2[i]) { // check i'th bit of y using bitwise and
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean negX;
        var boolean negY;
        var int ans;

        if (x = 0) {
            return 0;
        }
        if (y = 1) {
            return x;
        }
        if (y = -1) {
            return -x;
        }
        if ((Math.abs(y) > Math.abs(x)) | (y < 0)) {
            return 0;
        }
        if (x < 0) {
            let negX = true;
            let x = -x;
        }
        if (y < 0) {
            let negY = true;
            let y = -y;
        }
        let q = Math.divide(x, (y + y));
        if ((x - ((q + q) * y)) < y) {
            let ans = q + q;
        }
        else {
            let ans = (q + q) + 1;
        }

        if (Math.netNeg(negX, negY)) {
            return (-ans);
        }
        return ans;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int potentialRoot;
        var int numBits;
        var int i;
        var int intermediateStep;

        if ((x = 0) | (x = 1)) {
            return x;
        }

        let y = 0;
        let numBits = 0;
        
        while (i < 15) {
            if (x > powersOf2[i]) {
                let numBits = numBits + 1;
            }
            let i = i + 1;
        }

        let j = (numBits / 2);

        while (j > -1) {
            let potentialRoot = y + powersOf2[j];
            let intermediateStep = (potentialRoot * potentialRoot);
            if (((intermediateStep < (x + 1)) & (intermediateStep > 0)) {
                let y = potentialRoot;
            }
            else {
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
