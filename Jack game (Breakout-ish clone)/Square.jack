// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Square {

   field int x, y; // screen location of the square's top-left corner
   field int width; // length of this square, in pixels
   field int height;
   field bool isErased;

   /** Constructs a new square with a given location and size. */
   constructor Square new(int Ax, int Ay, int Awidth, int Aheight) {
      let x = Ax;
      let y = Ay;
      let width = Awidth;
      let height = Aheight;
      let isErased = false;
      do draw();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   method void draw() {
      let isErased = false;
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + width, y + height);
      return;
   }

   method int currX() {
       return x;
   }

   method int currY() {
       return y;
   }

   method int currWidth() {
       return width;
   }

   method int currHeight() {
      return height;
   }

   method bool getErased() {
      return isErased;
   }

   /** Erases the square from the screen. */
   method void erase() {
      let isErased = true;
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + width, y + height);
      return;
   }

    /** Increments the square size by 2 pixels. */
   method void incSize() {
      if (((y + height) < 254) & ((x + width) < 510)) {
         do erase();
         let height = height + 2;
         let width = width + 2;
         do draw();
      }
      return;
   }

   /** Decrements the square size by 2 pixels. */
   method void decSize() {
      if ((width > 2) & (height > 2)) {
         do erase();
         let width = width - 2;
         let height = height - 2;
         do draw();
      }
      return;
   }

   /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + height) - 1, x + width, y + height);
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + width, y + 1);
      }
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if ((y + height) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + width, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + height) - 1, x + width, y + height);
      }
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + width) - 1, y, x + width, y + height);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + height);
      }
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if ((x + width) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + height);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + width) - 1, y, x + width, y + height);
      }
      return;
   }
}
