function Circle.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push pointer 0
call Circle.draw 1
pop temp 0
push pointer 0
return
function Circle.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Circle.currX 0
push argument 0
pop pointer 0
push this 0
return
function Circle.currY 0
push argument 0
pop pointer 0
push this 1
return
function Circle.currRad 0
push argument 0
pop pointer 0
push this 2
return
function Circle.intersects 0
push argument 0
pop pointer 0
push this 1
push argument 1
call Square.currY 1
gt
push this 1
push constant 2
push this 2
call Math.multiply 2
add
push argument 1
call Square.currY 1
gt
or
push this 1
push argument 1
call Square.currY 1
push argument 1
call Square.currHeight 1
add
lt
push this 1
push constant 2
push this 2
call Math.multiply 2
add
push argument 1
call Square.currY 1
push argument 1
call Square.currHeight 1
add
lt
or
and
push this 0
push argument 1
call Square.currX 1
gt
push this 0
push constant 2
push this 2
call Math.multiply 2
add
push argument 1
call Square.currX 1
gt
or
and
push this 0
push argument 1
call Square.currX 1
push argument 1
call Square.currWidth 1
add
lt
push this 0
push constant 2
push this 2
call Math.multiply 2
add
push argument 1
call Square.currX 1
push argument 1
call Square.currWidth 1
add
lt
or
and
push argument 1
call Square.getErased 1
not
and
return
function Circle.drawCircle 5
push argument 0
pop pointer 0
push argument 1
pop local 0
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push argument 3
push constant 2
call Math.multiply 2
lt
not
if-goto WHILE_END0
push argument 2
push constant 2
push argument 3
call Math.multiply 2
push local 3
call Math.multiply 2
push local 3
push local 3
call Math.multiply 2
sub
call Math.sqrt 1
add
push argument 3
add
pop local 1
push argument 2
push argument 3
add
push constant 2
push argument 3
call Math.multiply 2
push local 3
call Math.multiply 2
push local 3
push local 3
call Math.multiply 2
sub
call Math.sqrt 1
sub
pop local 2
push local 0
push local 1
push local 0
push local 2
call Screen.drawLine 4
pop temp 0
push local 0
push constant 1
add
pop local 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Circle.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
push constant 0
return
function Circle.erase 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 0
push this 2
push constant 2
call Math.multiply 2
add
push this 1
push this 2
push constant 2
call Math.multiply 2
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Circle.incSize 0
push argument 0
pop pointer 0
push this 1
push this 2
push constant 2
call Math.multiply 2
add
push constant 2
add
push constant 254
lt
push this 0
push this 2
push constant 2
call Math.multiply 2
add
push constant 2
add
push constant 510
lt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Circle.erase 1
pop temp 0
push this 2
push constant 2
add
pop this 2
push pointer 0
call Circle.draw 1
pop temp 0
label IF_FALSE0
push constant 0
return
function Circle.decSize 0
push argument 0
pop pointer 0
push this 2
push constant 2
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Circle.erase 1
pop temp 0
push this 2
push constant 2
sub
pop this 2
push pointer 0
call Circle.draw 1
pop temp 0
label IF_FALSE0
push constant 0
return
function Circle.moveUp 0
push argument 0
pop pointer 0
push this 1
push constant 4
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
push this 1
push constant 5
sub
pop this 1
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
label IF_FALSE0
push constant 0
return
function Circle.moveDown 0
push argument 0
pop pointer 0
push this 1
push this 2
push constant 2
call Math.multiply 2
add
push constant 3
add
push constant 254
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
push this 1
push constant 5
add
pop this 1
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
label IF_FALSE0
push constant 0
return
function Circle.moveLeft 0
push argument 0
pop pointer 0
push this 0
push constant 4
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
push this 0
push constant 5
sub
pop this 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
label IF_FALSE0
push constant 0
return
function Circle.moveRight 0
push argument 0
pop pointer 0
push this 0
push this 2
push constant 2
call Math.multiply 2
add
push constant 4
add
push constant 510
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
push this 0
push constant 5
add
pop this 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push pointer 0
push this 0
push this 1
push this 2
call Circle.drawCircle 4
pop temp 0
label IF_FALSE0
push constant 0
return
